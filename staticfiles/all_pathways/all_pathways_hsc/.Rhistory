dim(fibroblasts_adult)
fibroblasts_adult <- identify_pos_neg(fibroblasts_adult, fibroblasts_pos_markers)
fibroblasts_adult <- identify_pos_neg(fibroblasts_adult, fibroblasts_neg_markers)
dim(fibroblasts_adult)
fibroblasts_adult <- get_cells_by_markers(fibroblasts_adult, fibroblasts_pos_markers, fibroblasts_neg_markers)
View(fibroblasts_adult)
fibroblasts_newborn <- identify_pos_neg(fibroblasts_newborn, fibroblasts_pos_markers)
fibroblasts_newborn <- identify_pos_neg(fibroblasts_newborn, fibroblasts_neg_markers)
dim(fibroblasts_newborn)
fibroblasts_newborn <- get_cells_by_markers(fibroblasts_newborn, fibroblasts_pos_markers, fibroblasts_neg_markers)
Idents(fibroblasts_newborn) <- "Double Positive Fibroblasts"
save(fibroblasts_newborn, file = 'P:/zthomas/UTSouthwesternData/fibroblasts_newborn_double_positive.rda')
save(fibroblasts_adult, file = 'P:/zthomas/UTSouthwesternData/fibroblasts_adult_double_positive.rda')
whole_bm_adult <- get_uts_data("8wk/")
whole_bm_newborn <- get_uts_data("p4/")
whole_bm_adult <- NormalizeData(whole_bm_adult)
whole_bm_newborn <- NormalizeData(whole_bm_newborn)
whole_bm_adult <- identify_pos_neg(whole_bm_adult, fibroblasts_pos_markers)
whole_bm_adult <- identify_pos_neg(whole_bm_adult, fibroblasts_neg_markers)
dim(whole_bm_adult)
whole_bm_adult <- get_cells_by_markers(whole_bm_adult, fibroblasts_pos_markers, fibroblasts_neg_markers)
Idents(whole_bm_adult) <- "Double Positive Fibroblasts"
whole_bm_newborn <- identify_pos_neg(whole_bm_newborn, fibroblasts_pos_markers)
whole_bm_newborn <- identify_pos_neg(whole_bm_newborn, fibroblasts_neg_markers)
dim(whole_bm_newborn)
whole_bm_newborn <- get_cells_by_markers(whole_bm_newborn, fibroblasts_pos_markers, fibroblasts_neg_markers)
Idents(whole_bm_newborn) <- "Double Positive Fibroblasts"
save(whole_bm_newborn, file = 'P:/zthomas/UTSouthwesternData/whole_bm_newborn_double_positive.rda')
save(whole_bm_adult, file = 'P:/zthomas/UTSouthwesternData/whole_bm_adult_double_positive.rda')
get_double_negative_cells <- function(age = 'adult', population = 'whole_bm'){
if(age == 'adult'){
if(population == 'whole_bm'){
load('P:/zthomas/UTSouthwesternData/whole_bm_adult_double_positive.rda')
}else{
load('P:/zthomas/UTSouthwesternData/fibroblasts_adult_double_positive.rda')
}
}else{
if(population == 'whole_bm'){
load('P:/zthomas/UTSouthwesternData/whole_bm_newborn_double_positive.rda')
}else{
load('P:/zthomas/UTSouthwesternData/fibroblasts_newborn_double_positive.rda')
}
}
}
get_hspc_object <- function(){
jiya_data_path = "T:/Processed/SingleCell/cellranger_aggr/HS1-2-QC_aggr/outs/filtered_gene_bc_matrices_mex/mm10/"
counts <- Read10X(data.dir = jiya_data_path)
# Read the barcodes and genes so we can specify which gene name convention to
# use and rename the barcodes to be the HSPC labels from JIYA
barcodeshspc.path <- paste(jiya_data_path,"barcodes.tsv", sep = "")
geneshspc.path <- paste(jiya_data_path,"genes.tsv", sep = "")
genehspc.names <- read.delim(geneshspc.path, header=FALSE, stringsAsFactors=FALSE)
barcodehspc.names <- read.delim(barcodeshspc.path, header=FALSE, stringsAsFactors=FALSE)
barcodehspc.names$V2 <- gsub("[^0-9]", "",barcodehspc.names$V1)
# Define levels for the HSPC scRNA-seq data
# HSC_1, HSC_2, MPP-, GMP, MEP, CMP, lin-_1, lin-_2, lin-_3, CLP
barcodehspc.names$V2 <- gsub("[^0-9]", "",barcodehspc.names$V1)
barcodehspc.names$V2 <- gsub('10', 'CLP',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('3', 'MPP',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('2', 'HSC',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('1', 'HSC',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('9', 'lin-',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('8', 'lin-',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('7', 'lin-',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('6', 'CMP',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('5', 'MEP',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('4', 'GMP',barcodehspc.names$V2)
rownames(counts) = genehspc.names$V2 #V1 is Ensembl ID and V2 is gene symbol
#Reorder the rows
hspc_mat = counts[order(row.names(counts)),]
counts.assay <- CreateAssayObject(hspc_mat,
assay = "RNA")
hspc_seurat <- CreateSeuratObject(counts.assay)
hspc_seurat$orig.ident <- barcodehspc.names$V2
Idents(object = hspc_seurat) <- "orig.ident"
hspc_subset = subset(x = hspc_seurat, downsample = 500)
return(hspc_seurat)
}
library(Seurat)
library(dplyr)
library(Matrix)
library(CellChat)
library(stringr)
library(SingleR)
library(SingleCellExperiment)
library(scuttle)
hspcs <- get_hspc_object()
hscs <- subset(hspcs, idents = c("HSC"))
df <- GetAssayData(hscs, assay = 'RNA', slot = 'data')
df <- as.data.frame(as.matrix(df))
View(df)
rm(hscs, hspcs)
gc()
df<-t(df)
gc()
library("Hmsic")
library("Hmisc")
result <- rcorr(df)
result <- rcorr(df)
hspcs <- get_hspc_object()
get_hspc_object <- function(){
jiya_data_path = "T:/Processed/SingleCell/cellranger_aggr/HS1-2-QC_aggr/outs/filtered_gene_bc_matrices_mex/mm10/"
counts <- Read10X(data.dir = jiya_data_path)
# Read the barcodes and genes so we can specify which gene name convention to
# use and rename the barcodes to be the HSPC labels from JIYA
barcodeshspc.path <- paste(jiya_data_path,"barcodes.tsv", sep = "")
geneshspc.path <- paste(jiya_data_path,"genes.tsv", sep = "")
genehspc.names <- read.delim(geneshspc.path, header=FALSE, stringsAsFactors=FALSE)
barcodehspc.names <- read.delim(barcodeshspc.path, header=FALSE, stringsAsFactors=FALSE)
barcodehspc.names$V2 <- gsub("[^0-9]", "",barcodehspc.names$V1)
# Define levels for the HSPC scRNA-seq data
# HSC_1, HSC_2, MPP-, GMP, MEP, CMP, lin-_1, lin-_2, lin-_3, CLP
barcodehspc.names$V2 <- gsub("[^0-9]", "",barcodehspc.names$V1)
barcodehspc.names$V2 <- gsub('10', 'CLP',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('3', 'MPP',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('2', 'HSC',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('1', 'HSC',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('9', 'lin-',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('8', 'lin-',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('7', 'lin-',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('6', 'CMP',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('5', 'MEP',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('4', 'GMP',barcodehspc.names$V2)
rownames(counts) = genehspc.names$V2 #V1 is Ensembl ID and V2 is gene symbol
#Reorder the rows
hspc_mat = counts[order(row.names(counts)),]
counts.assay <- CreateAssayObject(hspc_mat,
assay = "RNA")
hspc_seurat <- CreateSeuratObject(counts.assay)
hspc_seurat$orig.ident <- barcodehspc.names$V2
Idents(object = hspc_seurat) <- "orig.ident"
hspc_subset = subset(x = hspc_seurat, downsample = 500)
return(hspc_subset)
}
hspcs <- get_hspc_object()
load("P:/zthomas/Intercellular Interactions Project/Paper Files/code/scRNA-seq/hspc_seurat.rda")
hspc = subset(x = hspc, downsample = 500)
hscs <- subset(hspc, idents = c("HSC"))
rm(df)
gc()
df <- GetAssayData(hscs, assay = 'RNA', slot = 'data')
df <- as.data.frame(as.matrix(df))
result <- rcorr(df)
View(df)
df <- t(df)
library("Hmisc")
result <- rcorr(as.matrix(df))
rm(hspc)
gc()
result <- rcorr(as.matrix(df))
gc()
rm(df, hscs)
gc()
library(Seurat)
library(dplyr)
library(Matrix)
library(CellChat)
library(stringr)
library(SingleR)
library(SingleCellExperiment)
library(scuttle)
load("P:/zthomas/Intercellular Interactions Project/Paper Files/code/scRNA-seq/hspc_seurat.rda")
hspc = subset(x = hspc, downsample = 500)
get_true_bm_object <- function(){
# READ IN THE NICHE CELL DATA (https://www.nature.com/articles/s41556-019-0439-6)
nichdata_path = "P:/zthomas/Intercellular Interactions Project/RNAMagnetDataBundle"
load(paste(nichdata_path, "/NicheData10x.RDA", sep=""))
NicheData10x <- UpdateSeuratObject(NicheData10x)
true_bm <- subset(x = NicheData10x, idents = c('B cell',
'Dendritic cells',
'Eo/Baso prog.',
'Ery prog.',
'Ery/Mk prog.',
'Erythroblasts',
'Gran/Mono prog.',
'LMPPs',
'Mk prog.',
'Mono prog.',
'Monocytes',
'NK cells',
'Neutro prog.',
'Neutrophils',
'T cells',
'large pre-B.',
'pro-B',
'small pre-B.'))
true_bm <- subset(x = true_bm, downsample = 200)
return(true_bm)
}
jiya_data_path = "T:/Processed/SingleCell/cellranger_aggr/HS1-2-QC_aggr/outs/filtered_gene_bc_matrices_mex/mm10/"
counts <- Read10X(data.dir = jiya_data_path)
# Read the barcodes and genes so we can specify which gene name convention to
# use and rename the barcodes to be the HSPC labels from JIYA
barcodeshspc.path <- paste(jiya_data_path,"barcodes.tsv", sep = "")
geneshspc.path <- paste(jiya_data_path,"genes.tsv", sep = "")
genehspc.names <- read.delim(geneshspc.path, header=FALSE, stringsAsFactors=FALSE)
barcodehspc.names <- read.delim(barcodeshspc.path, header=FALSE, stringsAsFactors=FALSE)
barcodehspc.names$V2 <- gsub("[^0-9]", "",barcodehspc.names$V1)
# Define levels for the HSPC scRNA-seq data
# HSC_1, HSC_2, MPP-, GMP, MEP, CMP, lin-_1, lin-_2, lin-_3, CLP
barcodehspc.names$V2 <- gsub("[^0-9]", "",barcodehspc.names$V1)
barcodehspc.names$V2 <- gsub('10', 'CLP',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('3', 'MPP',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('2', 'HSC',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('1', 'HSC',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('9', 'lin-',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('8', 'lin-',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('7', 'lin-',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('6', 'CMP',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('5', 'MEP',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('4', 'GMP',barcodehspc.names$V2)
barcodehspc.names$V1 = substr(barcodehspc.names$V1,1,16)
colnames(counts) <- barcodehspc.names$V1
rownames(counts) = genehspc.names$V2
hspc_mat = counts[order(row.names(counts)),]
counts.assay <- CreateAssayObject(hspc_mat,
assay = "RNA")
hspc_seurat <- CreateSeuratObject(counts.assay)
hspc_seurat$orig.ident <- barcodehspc.names$V2
Idents(object = hspc_seurat) <- "orig.ident"
hspc_seurat$bc.ident <- barcodehspc.names$V1
hspc_seurat <- subset(hspc_seurat, idents=goi)
goi = 'HSC'
hspc_seurat <- subset(hspc_seurat, idents=goi)
# DO THE METACELL CALCULATION HERE
#
#
metacells = SuperCell::SCimplify(Seurat::GetAssayData(hspc_seurat, slot = 'scale.data'),
k.knn = 30,
gamma = 20, # average number of singe cells in a metacell...
n.pc = 50,
genes.use = Seurat::VariableFeatures(hspc_seurat))
# DO THE METACELL CALCULATION HERE
#
#
metacells = SuperCell::SCimplify(Seurat::GetAssayData(hspc_seurat, layer = 'scale.data'),
k.knn = 30,
gamma = 20, # average number of singe cells in a metacell...
n.pc = 50,
genes.use = Seurat::VariableFeatures(hspc_seurat))
hspc_seurat <- NormalizeData(hspc_seurat)
hspc_seurat <- FindVariableFeatures(hspc_seurat, nfeatures = 2000)
hspc_seurat <- ScaleData(hspc_seurat)
hspc_seurat <- RunPCA(hspc_seurat, npcs = 50, verbose=F)
hspc_seurat <- RunUMAP(hspc_seurat, reduction = "pca", dims = c(1:30), n.neighbors = 30, verbose = F)
# DO THE METACELL CALCULATION HERE
#
#
metacells = SuperCell::SCimplify(Seurat::GetAssayData(hspc_seurat, layer = 'scale.data'),
k.knn = 30,
gamma = 20, # average number of singe cells in a metacell...
n.pc = 50,
genes.use = Seurat::VariableFeatures(hspc_seurat))
#
metacells.GE <- supercell_GE(Seurat::GetAssayData(hspc_seurat, layer = 'counts'),
metacells$membership,
mode = 'sum')
library(SuperCell)
#
metacells.GE <- supercell_GE(Seurat::GetAssayData(hspc_seurat, layer = 'counts'),
metacells$membership,
mode = 'sum')
#
#
colnames(metacells.GE) <- as.character(1:ncol(metacells.GE))
metacells.seurat <- CreateSeuratObject(counts = metacells.GE,
meta.data = data.frame(size = as.vector(table(metacells$membership))))
#
#
metacells.seurat@misc$cell_membership <- data.frame(row.names = names(metacells$membership),
membership = metacells$membership)
#
#
metacells.seurat@misc$var_features <- metacells$genes.use
View(metacells.seurat)
metacells.seurat <- subset(metacells.seurat, size >= 10)
View(metacells)
View(metacells.GE)
metacells.seurat <- subset(metacells.seurat, downsample = 500)
View(metacells.seurat)
get_general_niche <- function(){
# https://www.frontiersin.org/articles/10.3389/fcell.2021.622519/full#h4
gNiche_seurat <- readRDS("P:/zthomas/Intercellular Interactions Project/bone-marrow-seurat.rds")
Idents(gNiche_seurat) <- "labelsimple"
#gNiche_seurat <- subset(x = gNiche_seurat, idents = c("MSPC-Adipo","MSPC-Osteo"))
gNiche_seurat <- subset(x = gNiche_seurat, idents = c("Chondrocytes","EC-Arteriar","EC-Arteriolar","EC-Sinusoidal",
"Fibroblasts","MSPC-Adipo","MSPC-Osteo","Myofibroblasts","Osteo",
"Osteoblasts","Pericytes","Schwann-cells","Smooth-muscle" ))
# C Chondrocytes EC-Arteriar EC-Arteriolar EC-Sinusoidal Fibroblasts MSPC-Adipo MSPC-Osteo Myofibroblasts Osteo Osteoblasts Pericytes Schwann-cells Smooth-muscle
# Do I need to keep C? Cycling?
#gNiche_seurat = subset(x = gNiche_seurat, downsample = 200)
gNiche_seurat@assays$RNA@counts = gNiche_seurat@assays$RNA@data
DefaultAssay(gNiche_seurat) <- "RNA"
return(gNiche_seurat)
}
library(Seurat)
library(dplyr)
library(Matrix)
library(CellChat)
library(stringr)
library(SingleR)
library(SingleCellExperiment)
library(scuttle)
library(SuperCell)
get_true_bm_object <- function(){
# READ IN THE NICHE CELL DATA (https://www.nature.com/articles/s41556-019-0439-6)
nichdata_path = "P:/zthomas/Intercellular Interactions Project/RNAMagnetDataBundle"
load(paste(nichdata_path, "/NicheData10x.RDA", sep=""))
NicheData10x <- UpdateSeuratObject(NicheData10x)
true_bm <- subset(x = NicheData10x, idents = c('B cell',
'Dendritic cells',
'Eo/Baso prog.',
'Ery prog.',
'Ery/Mk prog.',
'Erythroblasts',
'Gran/Mono prog.',
'LMPPs',
'Mk prog.',
'Mono prog.',
'Monocytes',
'NK cells',
'Neutro prog.',
'Neutrophils',
'T cells',
'large pre-B.',
'pro-B',
'small pre-B.'))
true_bm <- subset(x = true_bm, downsample = 200)
return(true_bm)
}
load("P:/zthomas/Intercellular Interactions Project/Paper Files/code/scRNA-seq/hspc_seurat.rda")
hspc = subset(x = hspc, downsample = 500)
updateCellChatDB <- function(){
options(stringsAsFactors = FALSE)
interaction_input <- read.csv(file = 'P:/zthomas/Intercellular Interactions Project/CellChatMouseDB/interaction_input_CellChatDB.csv', row.names = 1)
complex_input <- read.csv(file = 'P:/zthomas/Intercellular Interactions Project/CellChatMouseDB/complex_input_CellChatDB.csv', row.names = 1)
cofactor_input <- read.csv(file = 'P:/zthomas/Intercellular Interactions Project/CellChatMouseDB/cofactor_input_CellChatDB.csv', row.names = 1)
geneInfo <- read.csv(file = 'P:/zthomas/Intercellular Interactions Project/CellChatMouseDB/geneInfo_input_CellChatDB.csv', row.names = 1)
CellChatDB <- list()
CellChatDB$interaction <- interaction_input
CellChatDB$complex <- complex_input
CellChatDB$cofactor <- cofactor_input
CellChatDB$geneInfo <- geneInfo
return(CellChatDB)
}
header.true <- function(df) {
names(df) <- as.character(unlist(df[1,]))
df[-1,]
}
pathwayDB <- function(pathwayName){
cellchatDB <- updateCellChatDB()
pathway = cellchatDB$interaction[cellchatDB$interaction$pathway_name == pathwayName,]
return(pathway)
}
get_specific_hspc_metacell <- function(goi){
jiya_data_path = "T:/Processed/SingleCell/cellranger_aggr/HS1-2-QC_aggr/outs/filtered_gene_bc_matrices_mex/mm10/"
counts <- Read10X(data.dir = jiya_data_path)
# Read the barcodes and genes so we can specify which gene name convention to
# use and rename the barcodes to be the HSPC labels from JIYA
barcodeshspc.path <- paste(jiya_data_path,"barcodes.tsv", sep = "")
geneshspc.path <- paste(jiya_data_path,"genes.tsv", sep = "")
genehspc.names <- read.delim(geneshspc.path, header=FALSE, stringsAsFactors=FALSE)
barcodehspc.names <- read.delim(barcodeshspc.path, header=FALSE, stringsAsFactors=FALSE)
barcodehspc.names$V2 <- gsub("[^0-9]", "",barcodehspc.names$V1)
# Define levels for the HSPC scRNA-seq data
# HSC_1, HSC_2, MPP-, GMP, MEP, CMP, lin-_1, lin-_2, lin-_3, CLP
barcodehspc.names$V2 <- gsub("[^0-9]", "",barcodehspc.names$V1)
barcodehspc.names$V2 <- gsub('10', 'CLP',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('3', 'MPP',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('2', 'HSC',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('1', 'HSC',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('9', 'lin-',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('8', 'lin-',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('7', 'lin-',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('6', 'CMP',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('5', 'MEP',barcodehspc.names$V2)
barcodehspc.names$V2 <- gsub('4', 'GMP',barcodehspc.names$V2)
barcodehspc.names$V1 = substr(barcodehspc.names$V1,1,16)
colnames(counts) <- barcodehspc.names$V1
rownames(counts) = genehspc.names$V2
hspc_mat = counts[order(row.names(counts)),]
counts.assay <- CreateAssayObject(hspc_mat,
assay = "RNA")
hspc_seurat <- CreateSeuratObject(counts.assay)
hspc_seurat$orig.ident <- barcodehspc.names$V2
Idents(object = hspc_seurat) <- "orig.ident"
hspc_seurat$bc.ident <- barcodehspc.names$V1
hspc_seurat <- subset(hspc_seurat, idents=goi)
hspc_seurat <- NormalizeData(hspc_seurat)
hspc_seurat <- FindVariableFeatures(hspc_seurat, nfeatures = 2000)
hspc_seurat <- ScaleData(hspc_seurat)
hspc_seurat <- RunPCA(hspc_seurat, npcs = 50, verbose=F)
hspc_seurat <- RunUMAP(hspc_seurat, reduction = "pca", dims = c(1:30), n.neighbors = 30, verbose = F)
# DO THE METACELL CALCULATION HERE
#
#
metacells = SuperCell::SCimplify(Seurat::GetAssayData(hspc_seurat, layer = 'scale.data'),
k.knn = 30,
gamma = 20, # average number of singe cells in a metacell...
n.pc = 50,
genes.use = Seurat::VariableFeatures(hspc_seurat))
#
metacells.GE <- supercell_GE(Seurat::GetAssayData(hspc_seurat, layer = 'counts'),
metacells$membership,
mode = 'sum')
#
#
colnames(metacells.GE) <- as.character(1:ncol(metacells.GE))
metacells.seurat <- CreateSeuratObject(counts = metacells.GE,
meta.data = data.frame(size = as.vector(table(metacells$membership))))
#
#
metacells.seurat@misc$cell_membership <- data.frame(row.names = names(metacells$membership),
membership = metacells$membership)
#
#
metacells.seurat@misc$var_features <- metacells$genes.use
metacells.seurat <- subset(metacells.seurat, size >= 10)
metacells.seurat <- subset(metacells.seurat, downsample = 500)
Idents(metacells.seurat) <- seq(1,500)
return(metacells.seurat)
}
setup_cellchat <- function(dataset, varfeatpath){
cellchat <- createCellChat(object = dataset)
CellChatDB <- updateCellChatDB()
cellchat@DB <- CellChatDB
#CellChatDB.use = subsetDB(CellChatDB, search = c("NOTCH", "IL7"), key = "pathway_name")
#cellchat@DB = CellChatDB.use
cellchat <- subsetData(cellchat)
load(varfeatpath)
cellchat@var.features = varfeats
rm(varfeats)
#cellchat <- identifyOverExpressedGenes(cellchat, do.fast = FALSE)
gc()
cellchat <- identifyOverExpressedInteractions(cellchat)
#cellchat <- projectData(cellchat, PPI.mouse)
return(cellchat)
}
get_general_niche <- function(){
# https://www.frontiersin.org/articles/10.3389/fcell.2021.622519/full#h4
gNiche_seurat <- readRDS("P:/zthomas/Intercellular Interactions Project/bone-marrow-seurat.rds")
Idents(gNiche_seurat) <- "labelsimple"
#gNiche_seurat <- subset(x = gNiche_seurat, idents = c("MSPC-Adipo","MSPC-Osteo"))
gNiche_seurat <- subset(x = gNiche_seurat, idents = c("Chondrocytes","EC-Arteriar","EC-Arteriolar","EC-Sinusoidal",
"Fibroblasts","MSPC-Adipo","MSPC-Osteo","Myofibroblasts","Osteo",
"Osteoblasts","Pericytes","Schwann-cells","Smooth-muscle" ))
# C Chondrocytes EC-Arteriar EC-Arteriolar EC-Sinusoidal Fibroblasts MSPC-Adipo MSPC-Osteo Myofibroblasts Osteo Osteoblasts Pericytes Schwann-cells Smooth-muscle
# Do I need to keep C? Cycling?
#gNiche_seurat = subset(x = gNiche_seurat, downsample = 200)
gNiche_seurat@assays$RNA@counts = gNiche_seurat@assays$RNA@data
DefaultAssay(gNiche_seurat) <- "RNA"
return(gNiche_seurat)
}
setwd("P:/zthomas/Intercellular Interactions Project")
#################################################################
##                Build Normal Microenvironment                ##
#################################################################
bm_niche <- get_general_niche()
bm_niche <- NormalizeData(object = bm_niche)
true_bm <- get_true_bm_object()
true_bm <- NormalizeData(object = true_bm)
# SPECIFIC DATA TO LOOK AT?
#doi <- get_tet2_data("KH", 'aoe')
doi <- get_specific_hspc_metacell('HSC')
doi[['RNA']] <- JoinLayers(doi[['RNA']])
doi <- NormalizeData(object = doi)
bm_hspc <- merge(bm_niche, hspc)
bm_hspc_hm <- merge(bm_hspc, doi)
All_bm_hspc <- merge(bm_hspc_hm, true_bm)
#################################################################
##              Normalize for cellchat and run it              ##
##   Make sure to select the right file of variable features   ##
#################################################################
All_bm_hspc[['RNA']] <- JoinLayers(All_bm_hspc[['RNA']])
All_bm_hspc <- NormalizeData(object = All_bm_hspc)
#cellchat <- setup_cellchat(All_bm_hspc, "C:/Users/Zack Thomas/Documents/Intercellular Interactions Project/old_mpp_old_bm_varfeats.rda")
#cellchat <- setup_cellchat(All_bm_hspc, "C:/Users/Zack Thomas/Documents/Intercellular Interactions Project/young_mpp_young_bm_varfeats.rda")
#cellchat <- setup_cellchat(All_bm_hspc, "C:/Users/Zack Thomas/Documents/Intercellular Interactions Project/young_mpp_general_niche_varfeats.rda")
#cellchat <- setup_cellchat(All_bm_hspc, "C:/Users/Zack Thomas/Documents/Intercellular Interactions Project/old_mpp_general_niche_varfeats.rda")
cellchat <- setup_cellchat(All_bm_hspc, "P:/zthomas/Intercellular Interactions Project/general_bm_varfeats.rda")
rm(All_bm_hspc, bm_hspc, bm_hspc_hm, bm_niche, doi, hspc, true_bm)
gc()
getwd()
View(cellchat)
size_vector = cellchat@meta$size
write.csv(size_vector, file = 'size_vector.csv')
rm(size_vector)
gc()
cellchat <- computeCommunProb(cellchat)
cellchat <- computeCommunProbPathway(cellchat)
save(cellchat, file='hsc_general_bm_metacells_preAggregate.rda')
setwd("P:/zthomas/Intercellular Interactions Project/cluster_analysis/general_niche_hscMetacell/all_pathways")
col_name = c( "Chondrocytes","EC-Arteriar","EC-Arteriolar","EC-Sinusoidal", "Fibroblasts","MSPC-Adipo","MSPC-Osteo","Myofibroblasts","Osteo", "Osteoblasts","Pericytes","Schwann-cells","Smooth-muscle",
'HSC', 'MPP', 'GMP', 'CLP', 'MEP', 'lin-', 'CMP',
'B cell','Dendritic cells','Eo/Baso prog.','Ery prog.','Ery/Mk prog.','Erythroblasts','Gran/Mono prog.','LMPPs','Mk prog.','Mono prog.','Monocytes','NK cells','Neutro prog.','Neutrophils','T cells','large pre-B.','pro-B','small pre-B.'
)
for(cluster_type in col_name){
filename = str_replace_all(cluster_type, "[[:punct:]]", "")
num = colnames(cellchat@netP$prob[,,1])
layer = -1
for(i in num){
if(grepl(cluster_type, i, fixed = TRUE)){
layer = i
}
}
hsc_sending = cellchat@netP$prob[,which(num == layer),]
hsc_receiving = cellchat@netP$prob[which(num == layer),,]
hsc_s_filename = paste("singleCell_to_", filename, ".csv", sep= "")
hsc_r_filename = paste(filename, "_to_singleCell.csv", sep="")
write.csv(hsc_sending, file = hsc_s_filename)
write.csv(hsc_receiving, file = hsc_r_filename)
}
